Портирование
=========================

Контроллер устройства (device controller, dcd)
-------------------------

usb_dc_init
""""""""""""""""""""""""""""""""""""

``usb_dc_init`` используется для инициализации регистров контроллера устройства USB, установки USB-пинов, часов, прерываний и так далее. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usb_dc_init(void);

- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usb_dc_deinit
""""""""""""""""""""""""""""""""""""

``usb_dc_deinit`` используется для деинициализации регистров контроллера устройства USB. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usb_dc_deinit(void);

- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_set_address
""""""""""""""""""""""""""""""""""""

``usbd_set_address`` устанавливает адрес устройства. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbd_set_address(const uint8_t addr);

- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_ep_open
""""""""""""""""""""""""""""""""""""

``usbd_ep_open`` устанавливает атрибуты конечной точки и активирует соответствующие прерывания. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbd_ep_open(const struct usbd_endpoint_cfg *ep_cfg);

- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_ep_close
""""""""""""""""""""""""""""""""""""

``usbd_ep_close`` закрывает конечную точку. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbd_ep_close(const uint8_t ep);

- **event**
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_ep_set_stall
""""""""""""""""""""""""""""""""""""

``usbd_ep_set_stall`` устанавливает состояние конечной точки в "stall" и отправляет пакет рукопожатия "stall". **Эта функция доступна пользователям**.

.. code-block:: C

    int usbd_ep_set_stall(const uint8_t ep);

- **ep** адрес конечной точки
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_ep_clear_stall
""""""""""""""""""""""""""""""""""""

``usbd_ep_clear_stall`` сбрасывает состояние "stall" конечной точки. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbd_ep_clear_stall(const uint8_t ep);

- **ep** адрес конечной точки
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_ep_is_stalled
""""""""""""""""""""""""""""""""""""

``usbd_ep_is_stalled`` считывает текущее состояние "stall" конечной точки. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbd_ep_is_stalled(const uint8_t ep, uint8_t *stalled);

- **ep** адрес конечной точки
- **return** Возвращает 1, если состояние "stall"; 0, если состояние не "stall".

usbd_ep_start_write
""""""""""""""""""""""""""""""""""""

``usbd_ep_start_write`` инициирует отправку данных через конечную точку. После завершения отправки будет вызвана зарегистрированная функция обратного вызова для завершения передачи входящего пакета. Эта функция предназначена для асинхронной отправки. **Эта функция доступна пользователям**.

.. code-block:: C

    int usbd_ep_start_write(const uint8_t ep, const uint8_t *data, uint32_t data_len);

- **ep** адрес входящей конечной точки
- **data** буфер данных для отправки
- **data_len** длина данных для отправки, в принципе без ограничений, рекомендуется в пределах 16 Кбайт
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbd_ep_start_read
""""""""""""""""""""""""""""""""""""

``usbd_ep_start_read`` инициирует прием данных через конечную точку. После завершения приема будет вызвана зарегистрированная функция обратного вызова для завершения передачи исходящего пакета. Эта функция предназначена для асинхронного приема. **Эта функция доступна пользователям**.

.. code-block:: C

    int usbd_ep_start_read(const uint8_t ep, uint8_t *data, uint32_t data_len);

- **ep** адрес исходящей конечной точки
- **data** буфер данных для приема
- **data_len** длина данных для приема, в принципе без ограничений, рекомендуется в пределах 16 Кбайт, и желательно кратно максимальному размеру пакета
- **return** Возвращает 0, если все в порядке; иначе - ошибка

.. note:: После начала приема, прерывание по завершению передачи будет вызвано в двух случаях: 1) последний пакет является коротким; 2) общая длина приема равна data_len

Контроллер хоста (host controller, hcd)
------------------------

usb_hc_init
""""""""""""""""""""""""""""""""""""

``usb_hc_init`` используется для инициализации регистров контроллера хоста USB, установки USB-пинов, часов, прерываний и так далее. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usb_hc_init(void);

- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbh_roothub_control
""""""""""""""""""""""""""""""""""""

``usbh_roothub_control`` используется для отправки запросов к roothub. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbh_roothub_control(struct usb_setup_packet *setup, uint8_t *buf);

- **setup** запрос
- **buf** приемный буфер
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbh_ep_pipe_reconfigure
""""""""""""""""""""""""""""""""""""

``usbh_ep_pipe_reconfigure`` перенастраивает атрибуты pipe для конечной точки 0. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbh_ep_pipe_reconfigure(usbh_pipe_t pipe, uint8_t dev_addr, uint8_t ep_mps, uint8_t mult);

- **pipe** дескриптор pipe
- **dev_addr** адрес устройства, в котором находится конечная точка
- **ep_mps** максимальный размер пакета для конечной точки
- **mult** количество передач в одной транзакции
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbh_pipe_alloc
""""""""""""""""""""""""""""""""""""

``usbh_pipe_alloc`` выделяет pipe для конечной точки. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbh_pipe_alloc(usbh_pipe_t *pipe, const struct usbh_endpoint_cfg *ep_cfg);

- **pipe** дескриптор pipe
- **ep_cfg** некоторая информация, необходимая для инициализации конечной точки
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbh_pipe_free
""""""""""""""""""""""""""""""""""""

``usbh_pipe_free`` освобождает атрибуты конечной точки. **Эта функция не доступна пользователям**.

.. code-block:: C

    int usbh_pipe_free(usbh_pipe_t pipe);

- **pipe** информация о конечной точке
- **return** Возвращает 0, если все в порядке; иначе - ошибка.

usbh_submit_urb
""""""""""""""""""""""""""""""""""""

``usbh_submit_urb`` выполняет запрос данных к конечной точке на определенном адресе. **Эта функция доступна пользователям**.

.. code-block:: C

    int usbh_submit_urb(struct usbh_urb *urb);

- **urb** USB Request Block (USB запрос)
- **return** Возвращает 0, если все в порядке; иначе - ошибка

Структура `urb` включает в себя:

.. code-block:: C

    struct usbh_urb {
        usbh_pipe_t pipe;
        struct usb_setup_packet *setup;
        uint8_t *transfer_buffer;
        uint32_t transfer_buffer_length;
        int transfer_flags;
        uint32_t actual_length;
        uint32_t timeout;
        int errorcode;
        uint32_t num_of_iso_packets;
        usbh_complete_callback_t complete;
        void *arg;
        struct usbh_iso_frame_packet iso_packet[];
    };

- **pipe** дескриптор pipe, соответствующий конечной точке
- **setup** буфер запроса setup, используется для конечной точки 0
- **transfer_buffer** буфер данных для передачи
- **transfer_buffer_length** длина передачи данных
- **transfer_flags** флаги, передаваемые во время передачи
- **actual_length** фактическая длина передачи
- **timeout** время ожидания передачи; если 0, функция не является блокирующей и может использоваться в прерываниях
- **errorcode** код ошибки
- **num_of_iso_packets** количество iso-фреймов или микрофреймов
- **complete** функция обратного вызова при завершении передачи
- **arg** аргумент, передаваемый при завершении передачи
- **iso_packet** iso-пакеты

`errorcode` может возвращать следующие значения:

.. list-table::
    :widths: 30 30
    :header-rows: 1

    * - КОД ОШИБКИ
      - Описание
    * - ENOMEM
      - Недостаточно памяти
    * - ENODEV
      - Устройство не подключено
    * - EBUSY
      - Текущая передача данных еще не завершена
    * - ETIMEDOUT
      - Тайм-аут передачи данных
    * - EPERM
      - Хост получил STALL-пакет или BABBLE
    * - EIO
      - Ошибка передачи данных
    * - EAGAIN
      - Хост постоянно получает NAK-пакеты
    * - EPIPE
      - Переполнение данных
    * - ESHUTDOWN
      - Устройство отключено, передача прервана

Структура `iso_packet` включает:

.. code-block:: C

  struct usbh_iso_frame_packet {
      uint8_t *transfer_buffer;
      uint32_t transfer_buffer_length;
      uint32_t actual_length;
      int errorcode;
  };

- **transfer_buffer** буфер данных для передачи
- **transfer_buffer_length** длина передачи данных
- **actual_length** фактическая длина передачи
- **errorcode** код ошибки
