# clang-format configuration file. Intended for clang-format >= 11.0
#
# For more information, see:
#
#   https://clang.llvm.org/docs/ClangFormat.html
#   https://clang.llvm.org/docs/ClangFormatStyleOptions.html
#
---
# Language: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language: Cpp
# BasedOnStyle: LLVM
# Offset for access specifiers (public, private, etc.)
AccessModifierOffset: -4
# Alignment after open brackets (open round, angle, and square brackets): Align, Don't Align, Always Break (always break line after open bracket)
AlignAfterOpenBracket: Align
# Align all equal signs during consecutive assignments
AlignConsecutiveAssignments: false
# Align bit-fields
AlignConsecutiveBitFields: true
# Align all variable names during consecutive declarations
AlignConsecutiveDeclarations: false
# Align consecutively during macros
AlignConsecutiveMacros: true
# Left-align backslashes in escaped newlines (use backslash for line continuation)
AlignEscapedNewlines: Left
# Horizontally align operands in binary and ternary expressions
AlignOperands: true
# Align consecutive trailing comments
AlignTrailingComments: true
# Allow all parameters of a function declaration to be put on the next line
AllowAllParametersOfDeclarationOnNextLine: false
# Allow short blocks to be on a single line
AllowShortBlocksOnASingleLine: false
# Allow short case labels to be on a single line
AllowShortCaseLabelsOnASingleLine: false
# Allow short functions to be on a single line: None, InlineOnly (defined inside a class), Empty (empty functions), Inline (defined inside a class, empty functions), All
AllowShortFunctionsOnASingleLine: None
# Allow short if statements to remain on the same line
AllowShortIfStatementsOnASingleLine: false
# Allow short loops to remain on the same line
AllowShortLoopsOnASingleLine: false
# Always break after definition return type (deprecated)
AlwaysBreakAfterDefinitionReturnType: None
# Always break after return type: None, All, TopLevel (top-level functions, not inside classes), AllDefinitions (all definitions, not including declarations), TopLevelDefinitions (all top-level function definitions)
AlwaysBreakAfterReturnType: None
# Always break before multiline string literals
AlwaysBreakBeforeMultilineStrings: false
# Always break before template declarations
AlwaysBreakTemplateDeclarations: false
# False means function arguments are either all on the same line or each on its own line
BinPackArguments: true
# False means all parameters are either all on the same line or each on its own line
BinPackParameters: true
# Brace breaking, only effective when BreakBeforeBraces is set to Custom
BraceWrapping:
    AfterClass: false
    AfterControlStatement: false
    AfterEnum: false
    AfterFunction: true
    AfterNamespace: false
    AfterObjCDeclaration: false
    AfterStruct: false
    AfterUnion: false
    AfterExternBlock: false # Unknown to clang-format-5.0
    BeforeCatch: false
    BeforeElse: false
    IndentBraces: false
    SplitEmptyFunction: true # Unknown to clang-format-4.0
    SplitEmptyRecord: true # Unknown to clang-format-4.0
    SplitEmptyNamespace: true # Unknown to clang-format-4.0
# Break before binary operators: None (break after operator), NonAssignment (break before non-assignment operators), All (break before operator)
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Custom
#BreakBeforeInheritanceComma: false # Unknown to clang-format-4.0
# Break before ternary operators
BreakBeforeTernaryOperators: false
# Break before commas in constructor initializer lists
BreakConstructorInitializersBeforeComma: false
BreakAfterJavaFieldAnnotations: false
BreakStringLiterals: false
# Character limit per line, 0 means no limit
ColumnLimit: 0
# Regular expression describing comments of special meaning which should not be split into multiple lines or otherwise changed
CommentPragmas: '^ IWYU pragma:'
CompactNamespaces: false # Unknown to clang-format-4.0
# Constructor initializer lists are either all on one line or one per line
ConstructorInitializerAllOnOneLineOrOnePerLine: false
# Indentation width for constructor initializer lists
ConstructorInitializerIndentWidth: 4
# Indentation width for continued lines
ContinuationIndentWidth: 4
# Remove space within C++11 list initialization braces {}
Cpp11BracedListStyle: false
# Inherit the most common pointer and reference alignment
DerivePointerAlignment: false
# Disable formatting
DisableFormat: false
ForEachMacros:
  - 'SHELL_EXPORT_CMD'

# Automatically detect if function calls and definitions should be formatted as one parameter per line (Experimental)
ExperimentalAutoDetectBinPacking: false
# Indent case labels
IndentCaseLabels: true
# Indentation width
IndentWidth: 4
# Indent function names when a function's return type is wrapped to a new line
IndentWrappedFunctionNames: false
# Preserve empty lines at the start of blocks
KeepEmptyLinesAtTheStartOfBlocks: false
# Regular expression for macros that start a block
MacroBlockBegin: ''
# Regular expression for macros that end a block
MacroBlockEnd: ''
# Maximum number of consecutive empty lines to keep
MaxEmptyLinesToKeep: 1
# Indentation for namespaces: None, Inner (indent contents of nested namespaces), All
NamespaceIndentation: None
# Indentation width when using ObjC blocks
ObjCBlockIndentWidth: 4
# Add a space after @property in ObjC
ObjCSpaceAfterProperty: false
# Add a space before protocol lists in ObjC
ObjCSpaceBeforeProtocolList: true
# Penalty for breaking before the first call parameter
PenaltyBreakBeforeFirstCallParameter: 30
# Penalty for introducing a line break in a comment
PenaltyBreakComment: 10
# Penalty for breaking before the first << operator
PenaltyBreakFirstLessLess: 0
# Penalty for introducing a line break in a string literal
PenaltyBreakString: 10
# Penalty for each character outside of the column limit
PenaltyExcessCharacter: 100
# Penalty for putting the return type of a function onto its own line
PenaltyReturnTypeOnItsOwnLine: 60
# Alignment for pointers and references: Left, Right, Middle
PointerAlignment: Right
# Allow reformatting of comments
ReflowComments: false
# Allow sorting of #includes
SortIncludes: false
# Add space after C-style casts
SpaceAfterCStyleCast: false
# Add space before assignment operators
SpaceBeforeAssignmentOperators: true
# Add a space before open parentheses: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements
# Add space in empty parentheses
SpaceInEmptyParentheses: false
# Number of spaces before trailing comments (applies only to //)
SpacesBeforeTrailingComments: 1
# Add space after < and before > in angle brackets
SpacesInAngles: false
# Add spaces in container literals (like ObjC and JavaScript arrays and dictionaries)
SpacesInContainerLiterals: false
# Add space in C-style cast parentheses
SpacesInCStyleCastParentheses: false
# Add space after ( and before ) in parentheses
SpacesInParentheses: false
# Add space after [ and before ] in square brackets, does not affect lambda expressions and array declarations of unspecified size
SpacesInSquareBrackets: false
# Standard: Cpp03, Cpp11, Auto
Standard: Cpp03
# Tab width
TabWidth: 4
# Usage of tab characters: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab: Never
...
